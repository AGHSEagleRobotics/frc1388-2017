// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonDrive.h"
#define THRESHOLD 0.5
#define MINPOWER 0.28

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonDrive::AutonDrive(double setpoint): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_setpoint = setpoint;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonDrive::Initialize() {

	RobotMap::driveTrainRightEncoder->Reset();

}

// Called repeatedly when this Command is scheduled to run
void AutonDrive::Execute() {

	printf("Encoder Distance: %f\n", RobotMap::driveTrainRightEncoder->GetDistance());
	double distance = RobotMap::driveTrainRightEncoder->GetDistance();
	double error = m_setpoint - distance;
	printf("Distance: %f\n", distance);
	double power = copysign(fmin(0.5,(error / m_setpoint) + MINPOWER), m_setpoint);
	printf("Power: %f\n", power);
	RobotMap::driveTrainRobotDrive->TankDrive(power, power);

}

// Make this return true when this Command no longer needs to run execute()
bool AutonDrive::IsFinished() {
//	double distance = RobotMap::driveTrainRightEncoder->GetDistance();
//	double error = m_setpoint - distance;
//	if(fabs(m_setpoint - error) <= THRESHOLD){
//		return true;
//	}
    return false;
}

// Called once after isFinished returns true
void AutonDrive::End() {
	RobotMap::driveTrainRobotDrive->TankDrive(0.0, 0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonDrive::Interrupted() {

}
