// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#define THRESHOLD 2

#include "../Robot.h"
#include "../RobotMap.h"
#include "AutonTurn.h"
#include "../Gyro/src/ADIS16448_IMU.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonTurn::AutonTurn(int degrees): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	m_degrees = degrees;
	gyro = 0;
	goal = 0;
	printf("CONSTRUCTOR");
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonTurn::Initialize() {
	gyro = RobotMap::imu->GetAngleZ(); //angle get z

	gyro %= 360;
	printf("\nGyro: %d", gyro);
	goal = gyro + m_degrees;


}

void AutonTurn::Execute(){



	int dist = RobotMap::imu->GetAngleZ(); //get anglez

//	double power = copysign(dist/goal, m_degrees);
//
//	RobotMap::driveTrainRobotDrive->TankDrive(0.5*power, 0.5*-power);

	printf("\nDistance: %d", dist);

}

// Called repeatedly when this Command is scheduled to run

// Make this return true when this Command no longer needs to run execute()
bool AutonTurn::IsFinished() {

	int gyro = RobotMap::imu->GetAngleZ(); //get angle z

	if((gyro > goal - THRESHOLD) && (gyro < goal + THRESHOLD)) return true;

    return false;
}

// Called once after isFinished returns true
void AutonTurn::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonTurn::Interrupted() {

}
