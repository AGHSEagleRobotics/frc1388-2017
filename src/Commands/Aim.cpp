// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Aim.h"
#define DEADBAND .1
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Aim::Aim(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::aimer.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
double Aim::Deadband(double input){
	if (fabs(input) <= DEADBAND) return 0;
	else if (input > 0) return (input - DEADBAND) / (1 - DEADBAND);
	else if (input < 0) return (input + DEADBAND) / (1 - DEADBAND);
	return 0; // to appease the warning gods
}

void Aim::Initialize() {
	RobotMap::aimerAimMotor->Set(0.0);
	RobotMap::aimerAimerPID->Disable();

}

// Called repeatedly when this Command is scheduled to run
void Aim::Execute() {

	double z = Robot::oi->getOpStick()->GetTwist();
	double currentDist = RobotMap::aimerAimEncoder->GetDistance();
//	printf("joystick input: %f \n", z);

	if ((RobotMap::aimerBottomLimit && (z < 0)) || (RobotMap::aimerTopLimit && (z > 0))){
		RobotMap::aimerAimMotor->Set(0.0);
	}
	else{
		RobotMap::aimerAimMotor->Set(Deadband(z));
	}

}

// Make this return true when this Command no longer needs to run execute()
bool Aim::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Aim::End() {
	RobotMap::aimerAimMotor->Set(0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Aim::Interrupted() {
	End();
}
