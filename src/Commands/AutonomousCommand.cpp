// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutonomousCommand.h"
#include "../Robot.h"
#define THRESHOLD 0.1
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand() {
	int choice = 0;
	bool a = !(Robot::driveTrain->firstBit->GetVoltage() > THRESHOLD);
	bool b = !(Robot::driveTrain->secondBit->GetVoltage()> THRESHOLD);
	bool c = !(Robot::driveTrain->thirdBit->GetVoltage() > THRESHOLD);
	bool d = !(Robot::driveTrain->fourthBit->GetVoltage()> THRESHOLD);
	if(a) choice += 8;
	if(b) choice += 4;
	if(c) choice += 2;
	if(d) choice += 1;

	printf("Choice = %i \n", choice);
	printf("If the choice is incorrect, make sure the wires are plugged in the following manner: \n red, blue, orange, green \n");

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
                      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
//	double x = RobotMap::imu->GetAngleX();
//	double y = RobotMap::imu->GetAngleY();
//	double z = RobotMap::imu->GetAngleZ();
//
//	printf("X Gyro : %f , Y Gyro: %f, Z Gyro: %f \n", x,y,z);
 }
