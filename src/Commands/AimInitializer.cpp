// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AimInitializer.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AimInitializer::AimInitializer(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::aimer.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AimInitializer::Initialize() {
	aimerIsInit = false;
	aimerLimitTriggered = false;
}

// Called repeatedly when this Command is scheduled to run
void AimInitializer::Execute() {
	if(aimerIsInit == false){
		if(RobotMap::aimerBottomLimit->Get() == false && aimerLimitTriggered == false){
			// move aimer motor down until we hit the limit switch
			RobotMap::aimerAimMotor->Set(0.5);
		} else if (RobotMap::aimerBottomLimit->Get() == true && aimerLimitTriggered == false){
			aimerLimitTriggered = true;
			// move aimer motor up just until limit switch turns off
			RobotMap::aimerAimMotor->Set(-0.5);
		} else if (RobotMap::aimerBottomLimit->Get() == false && aimerLimitTriggered == true){
			//stop the motor
			RobotMap::aimerAimMotor->Set(0.0);
			// set the encoder to zero

			RobotMap::aimerAimEncoder->Reset();
			aimerIsInit = true;
			// aimer is initialied
		}

	}else{
		RobotMap::aimerAimMotor->Set(0.0);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool AimInitializer::IsFinished() {
	if(aimerLimitTriggered == true){
		aimerLimitTriggered = true;
		aimerIsInit = true;
	}
    return false;
}

// Called once after isFinished returns true
void AimInitializer::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AimInitializer::Interrupted() {

}
