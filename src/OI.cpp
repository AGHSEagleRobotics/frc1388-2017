// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"
#include <string>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/Aim.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DecreaseShooterPower.h"
#include "Commands/Drive.h"
#include "Commands/Fire.h"
#include "Commands/IncreaseShooterPower.h"
#include "Commands/Intake.h"
#include "Commands/RunShooter.h"
#include "Commands/RunWinch.h"
#include "Commands/ShooterPresetPower.h"
#include "Commands/ToggleDrive.h"
#include "Commands/TurnIntakeOff.h"
#include "Commands/TurnShooterOff.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

using namespace std;

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    opStick.reset(new Joystick(2));
    
    intakeOn.reset(new JoystickButton(opStick.get(), 1));
    intakeOn->WhenPressed(new Intake());
    intakeOff.reset(new JoystickButton(opStick.get(), 7));
    intakeOff->WhenPressed(new TurnIntakeOff());
    offPower.reset(new JoystickButton(opStick.get(), 5));
    offPower->WhenPressed(new TurnShooterOff());
    presetPower.reset(new JoystickButton(opStick.get(), 4));
    presetPower->WhenPressed(new ShooterPresetPower());
    decreasePower.reset(new JoystickButton(opStick.get(), 3));
    decreasePower->WhenPressed(new DecreaseShooterPower());
    increasePower.reset(new JoystickButton(opStick.get(), 2));
    increasePower->WhenPressed(new IncreaseShooterPower());
    rightStick.reset(new Joystick(1));
    
    rightFireButton.reset(new JoystickButton(rightStick.get(), 1));
    rightFireButton->WhenPressed(new Fire());
    leftStick.reset(new Joystick(0));
    
    leftFireButton.reset(new JoystickButton(leftStick.get(), 2));
    leftFireButton->WhenPressed(new Fire());
    toggleButton.reset(new JoystickButton(leftStick.get(), 1));
    toggleButton->WhenPressed(new ToggleDrive());

    // SmartDashboard Buttons
    SmartDashboard::PutData("Aim", new Aim());
    SmartDashboard::PutData("RunWinch", new RunWinch());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    SmartDashboard::PutNumber("Shooter Power", RobotMap::shooterShootMotor->Get());
    SmartDashboard::PutString("Ball Intake Motor 1", ballIntakeMotor1());
    SmartDashboard::PutString("Hopper Feeder Status", shooterFeeder());
    SmartDashboard::PutString("Shooter Status", shooterMotor());
    SmartDashboard::PutString("Drive Configuration", driveConfig());
}

	string OI::ballIntakeMotor1(){
		RobotMap::ballIntakeIntakeMotor->Get();
		if (RobotMap::ballIntakeIntakeMotor > 0){
			return "Ball Intake Is On";
		}else{
			return "Ball Intake Is off";
		}
	}

	string OI::shooterFeeder(){
		RobotMap::feederShooterFeedingMotor->Get();
		if(RobotMap::feederShooterFeedingMotor > 0){
			return "Shooter Feeder Is On";
		}else{
			return "Shooter Feeder Is Off";
		}
	}

	string OI::shooterMotor(){
		RobotMap::shooterShootMotor->Get();
		if(RobotMap::shooterShootMotor > 0){
			return "Shooting Motor Is On";
		}else{
			return "Shooting Motor Is Off";
		}
	}

	string OI::driveConfig(){
		Robot::driveTrain->isSwitched;
		if(Robot::driveTrain->isSwitched == true){
			return "Drive Train Is Switched";
		}else{
			return "Drive Train Is On Default";
		}
	}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getLeftStick() {
   return leftStick;
}

std::shared_ptr<Joystick> OI::getRightStick() {
   return rightStick;
}

std::shared_ptr<Joystick> OI::getOpStick() {
   return opStick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
